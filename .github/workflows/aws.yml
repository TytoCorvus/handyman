# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon EC2

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  teardown: 
    name: Tear down old EC2 instance
    runs-on: ubuntu-latest
    environment: production

    steps: 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Tear down old EC2 instance
        run: |
          instance="$(aws ec2 describe-instances /
          --filters Name=tag:Name,Values=handyman /
          --query 'Reservations[*].Instances[*].[InstanceId]' /
          --output text | head )"
          if [[ -z $instance ]]; then echo "No instance to destroy" && exit 0; else echo "Terminating instance"; fi
          aws ec2 terminate-instances --instance-ids $instance

  deploy:
    name: Run new EC2 instance
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create EC2 instance
      env: 
        EIP: ${{ secrets.AWS_HANDYMAN_ELASTIC_IP }}
      run: |
        aws ec2 run-instances /
        --image-id ami-03f65b8614a860c29 /
        --count 1 /
        --instance-type t2.micro /
        --key-name handyman-key /
        --iam-instance-profile Arn=${{ secrets.AWS_HANDYMAN_ROLE_ARN }},Name=${{ vars.AWS_HANDYMAN_ROLE_NAME }} /
        --network-interfaces AssociatePublicIpAddress=true,PublicIpAddress=${{ env.EIP }},SubnetId=subnet-82ebb3fb,Groups=[{GroupName=launch-wizard-5,GroupId=sg-0e6ffd8993b87d2fe}] /
        --security-group-ids sg-0e6ffd8993b87d2fe /
        --subnet-id subnet-82ebb3fb /
        --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=handyman}]' /
        --query 'Instances[*].[InstanceId]' /
        --output text /
        --user-data handyman/deploy/user_data.sh



        

